import { TabWidget, Button, HorizontalBox } from "std-widgets.slint";

import { SettingsView } from "settings.slint";
import { UpdateView } from "update.slint";

import { Globals, Settings, ConfigProperty, UpdateCheck } from "globals.slint";

export { Globals, SettingsView, UpdateView, UpdateCheck, Settings, ConfigProperty }

export component MainWindow inherits Window {
    title: "Link Rustler Manager";
    min-width: 600px;

    property <length> close_button_Width: 55px;

    in property <bool> link_checker_running: false;

    callback close_window();
    callback run_link_checker();
    callback gen_report();
    callback cause_error();

    VerticalLayout {
        HorizontalBox {
            min-width: parent.width - 10px;
            padding: 5px;

            Button {
                width: root.close_button_Width;

                checked: false;
                text: "Close";

                clicked => {
                    root.close_window();
                }
            }

            Button {
                min-width: parent.width * 0.5 - root.close_button_Width - 10px;
                text: root.link_checker_running ? "Running..." : "Run link checker";

                enabled: {
                    !root.link_checker_running && Globals.link_check_can_run
                };

                clicked => {
                    root.run_link_checker();
                }
            }

            Button {
                min-width: parent.width * 0.5 - root.close_button_Width - 10px;

                text: "Generate report";

                clicked => {
                    root.gen_report();
                }
            }
        }

        TabWidget {
            Tab {
                title: "Settings";

                SettingsView {
                    width: 100%;
                    height: 100%;
                }
            }

            Tab {
                title: "Update";

                UpdateView {
                    width: 100%;
                    height: 100%;
                }
            }
        }
    }
}
